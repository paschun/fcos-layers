# Needs to be set to the Fedora version on CoreOS stable stream, as it is our base image.
ARG BUILDER_VERSION=41
# Base image for the final layer
ARG BASE_IMAGE=quay.io/fedora/fedora-coreos:stable

FROM ${BASE_IMAGE} AS base

# We can't use the `uname -r` as it will pick up the host kernel version
FROM base AS kernel-query
RUN rpm -qa kernel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}' | tee /kernel-version.txt

# Using https://openzfs.github.io/openzfs-docs/Developer%20Resources/Custom%20Packages.html
FROM registry.fedoraproject.org/fedora:${BUILDER_VERSION} AS builder
ARG BUILDER_VERSION
COPY --from=kernel-query /kernel-version.txt /kernel-version.txt
WORKDIR /etc/yum.repos.d
RUN curl -L -O https://src.fedoraproject.org/rpms/fedora-repos/raw/f${BUILDER_VERSION}/f/fedora-updates-archive.repo \
    && sed -i 's/enabled=AUTO_VALUE/enabled=true/' fedora-updates-archive.repo \
    && sed -i 's@enabled=1@enabled=0@g' fedora-cisco-openh264.repo
RUN dnf install -y jq dkms akmods gcc make autoconf automake libtool rpm-build libtirpc-devel libblkid-devel \
    libuuid-devel libudev-devel openssl-devel zlib-ng-devel libaio-devel libattr-devel elfutils-libelf-devel \
    python3 python3-devel python3-setuptools python3-cffi libffi-devel git ncompress libcurl-devel \
    kernel-$(cat /kernel-version.txt) kernel-modules-$(cat /kernel-version.txt) kernel-devel-$(cat /kernel-version.txt) kernel-rpm-macros \
    systemd-devel libunwind-devel openssl python3-packaging

WORKDIR /

ARG ZFS_VERSION
# Inspo https://github.com/ublue-os/akmods/blob/main/build_files/zfs/build-kmod-zfs.sh
RUN : ${ZFS_VERSION:=$(curl -s "https://api.github.com/repos/openzfs/zfs/releases" | jq -r --arg ZMV "zfs-" '[ .[] | select(.prerelease==false and .draft==false) | select(.tag_name | startswith($ZMV))][0].tag_name' | cut -f '2-' -d '-' )} \
    && echo $ZFS_VERSION | tee /zfs_version.txt

RUN curl -L -O https://github.com/openzfs/zfs/releases/download/zfs-$(cat /zfs_version.txt)/zfs-$(cat /zfs_version.txt).tar.gz \
    && tar xzf zfs-$(cat /zfs_version.txt).tar.gz \
    && mv zfs-$(cat /zfs_version.txt) zfs
WORKDIR /zfs

RUN ./configure -with-linux=/usr/src/kernels/$(cat /kernel-version.txt)/ -with-linux-obj=/usr/src/kernels/$(cat /kernel-version.txt)/ \
    && make -j $(nproc) rpm-utils rpm-kmod \
    || (cat config.log && exit 1)
RUN ls -al /zfs/*.rpm

# Final layer
FROM base

# ZFS
COPY --from=builder /zfs/*.rpm /zfs/
RUN rm -f \
      /zfs/*src.rpm \
      /zfs/*devel*.rpm \
      /zfs/*debug*.rpm \
      /zfs/zfs-test*.rpm \
    && ls -l /zfs/*.rpm \
    && rpm-ostree install \
      /zfs/*.rpm \
    # Auto-load ZFS module
    && depmod -a "$(rpm -qa kernel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}')" \
    && echo "zfs" > /etc/modules-load.d/zfs.conf \
    # We don't want any files on /var
    && rm -rf /var/lib/pcp \
    && ostree container commit

