name: Build an image for both arm64 and x86_64

on:
  workflow_call:
    inputs:
      stream: # used in tags
        required: true
        type: string
      image_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
      FCOS_VERSION: # used in tags
        required: true
        type: string
      ZFS_VERSION: # used in tags
        required: false
        type: string
        default: "zfs-version-should-have-been-set-here"

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
env:
  registry: ghcr.io
  # github.repository as <account>/<repo>

permissions:
  # contents: read is used in actions/checkout
  contents: read
  # permits an action to upload and publish packages on GitHub Packages
  packages: write
  # permits an action to generate an artifact attestation for a build.
  attestations: write
  # Fetch an OpenID Connect (OIDC) token.
  # This is used to complete the identity challenge with sigstore/fulcio when running outside of PRs.
  #id-token: write

#TODO:
# redhat-actions/podman-login
# redhat-actions/buildah-build # doesnt support annotations
# redhat-actions/push-to-registry
# cosign sign -y -r --key
#
# quay.io tag is later than curl streams json

jobs:
  setup-env:
    runs-on: ubuntu-latest
    steps:
      # Gets the version of Fedora distribution used in the Fedora CoreOS base image
      - name: Set Env variables
        id: setup-vars
        run: |
          IMAGE_FULL_NAME="${{ env.registry }}/${{ github.repository }}/${{ inputs.image_name }}"

          echo "IMAGE_FULL_NAME=$IMAGE_FULL_NAME" | tee -a $GITHUB_OUTPUT

    outputs:
      IMAGE_FULL_NAME: ${{ steps.setup-vars.outputs.IMAGE_FULL_NAME }}

  build-each:
    needs: setup-env
    strategy:
      fail-fast: true
      matrix:
        platform:
          - docker_arch: linux/amd64
            runner: ubuntu-latest
          - docker_arch: linux/arm64
            runner: ubuntu-24.04-arm

    name: Build ${{ inputs.image_name }} on ${{ matrix.platform.docker_arch }}
    runs-on: ${{ matrix.platform.runner }}

    env:
      IMAGE_FULL_NAME: ${{needs.setup-env.outputs.IMAGE_FULL_NAME}}

    steps:
      - name: Set env.PLATFORM_PAIR for this job
        run: |
          PLATFORM=${{ matrix.platform.docker_arch }}
          # replaces / with -
          echo "PLATFORM_PAIR=${PLATFORM//\//-}" | tee -a $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      # Set up BuildKit Docker container builder to be able to build-push and export cache
      # Needed for annotations
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/metadata-action
      - name: "Define image metadata: ${{ inputs.image_name }}"
        id: meta
        uses: docker/metadata-action@v5
        env:
          tag_suffix: ${{ inputs.image_name == 'zfs' && format('-{0}', inputs.ZFS_VERSION) || '' }}
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          tags: |
            type=raw,value=${{ inputs.stream }}
            type=raw,value=latest,enable=${{ inputs.stream == 'stable' }}
            type=raw,value=${{ inputs.FCOS_VERSION }}${{ env.tag_suffix }}

      # https://github.com/docker/build-push-action
      - name: "Build Docker image: ${{ inputs.image_name }}"
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ./${{ inputs.image_name }}/Containerfile
          context: ./${{ inputs.image_name }}
          build-args: ${{ inputs.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # always pull because old builds are cached under same tags
          pull: true
          platforms: ${{ matrix.platform.docker_arch }}
          tags: ${{ env.IMAGE_FULL_NAME }}
          annotations: ${{ steps.meta.outputs.annotations }}
          # https://docs.docker.com/build/exporters/image-registry/
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true,compression=zstd

      # https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
      - name: Export digests
        run: |
          mkdir -p ${{ runner.temp }}/digests/${{ inputs.image_name }}/${{ inputs.stream }}
          digest="${{ steps.build.outputs.digest }}"
          # removes sha256: prefix
          digest="${digest#sha256:}"
          touch "${{ runner.temp }}/digests/${{ inputs.image_name }}/${{ inputs.stream }}/${digest}"

      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.image_name }}-${{ inputs.stream }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/${{ inputs.image_name }}/${{ inputs.stream }}/*
          if-no-files-found: error
          retention-days: 1

      # Sign the resulting Docker images digests.
      # This will only write to the public Rekor transparency log when the Docker repository is public to avoid leaking data.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker images
        # step disabled for now
        if: false
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS_BASE: ${{ steps.meta-base.outputs.tags }}
          TAGS_ZFS: ${{ steps.meta-zfs.outputs.tags }}
          DIGEST_BASE: ${{ steps.build-and-push-base.outputs.digest }}
          DIGEST_ZFS: ${{ steps.build-and-push-zfs.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
        run: |
          echo "${TAGS_BASE}" | xargs -I {} cosign sign --yes {}@${DIGEST_BASE}
          echo "${TAGS_ZFS}" | xargs -I {} cosign sign --yes {}@${DIGEST_ZFS}

  merge-manifests:
    runs-on: ubuntu-latest
    needs:
      - setup-env
      - build-each
    env:
      IMAGE_FULL_NAME: ${{needs.setup-env.outputs.IMAGE_FULL_NAME}}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests/${{ inputs.image_name }}/${{ inputs.stream }}/
          pattern: digests-${{ inputs.image_name }}-${{ inputs.stream }}-*
          merge-multiple: true

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/metadata-action
      - name: "Define image metadata"
        id: meta
        uses: docker/metadata-action@v5
        env:
          tag_suffix: ${{ inputs.image_name == 'zfs' && format('-{0}', inputs.ZFS_VERSION) || '' }}
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          # creates 3 tags.
          # `stable` and `latest` when it's run on main branch
          # `20250101` when this workflow is triggered by a schedule
          tags: |
            type=raw,value=${{ inputs.stream }}
            type=raw,value=latest,enable=${{ inputs.stream == 'stable' }}
            type=raw,value=${{ inputs.FCOS_VERSION }}${{ env.tag_suffix }}
          # default labels: https://github.com/opencontainers/image-spec/blob/main/annotations.md
          # labels are deprecated, use annotations

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests/${{ inputs.image_name }}/${{ inputs.stream }}/
        run: |
          # jq command preps the tags as -t flags
          # printf command formats each filename as a reference to an image digest
          #   *: Expands to all files in the current directory (runner.temp/digests)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf "$IMAGE_FULL_NAME@sha256:%s " *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect "$IMAGE_FULL_NAME:${{ steps.meta.outputs.version }}"
