name: Build a specific container

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      build_args:
        required: false
        type: string
        default: ""
      tag_suffix:
        required: false
        type: string
        default: ""

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
    
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - docker_arch: linux/amd64
            fcos_arch: x86_64
            runner: ubuntu-latest
          - docker_arch: linux/arm64
            fcos_arch: aarch64
            runner: ubuntu-24.04-arm

    name: Build ${{ inputs.image_name }} on ${{ matrix.platform.docker_arch }}
    runs-on: ${{ matrix.platform.runner }}

    permissions:
      contents: read
      packages: write
      attestations: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Gets the version of Fedora distribution used in the Fedora CoreOS base image
      - name: Set Env variables
        run: |
          FCOS_JSON=$(curl -s "https://builds.coreos.fedoraproject.org/streams/stable.json")
          FCOS_VERSION=$(echo "$FCOS_JSON" | jq -r '.architectures.${{ matrix.platform.fcos_arch }}.artifacts.metal.release')
          BUILDER_VERSION=$(echo "$FCOS_VERSION" | cut -d '.' -f 1)
          ZFS_VERSION=$(curl -s "https://api.github.com/repos/openzfs/zfs/releases" | jq -r --arg ZMV "zfs-" '[ .[] | select(.prerelease==false and .draft==false) | select(.tag_name | startswith($ZMV))][0].tag_name' | cut -f2- -d-)
          echo "FCOS_VERSION=$FCOS_VERSION" | tee -a "$GITHUB_ENV"
          echo "BUILDER_VERSION=$BUILDER_VERSION" | tee -a "$GITHUB_ENV"
          echo "ZFS_VERSION=$ZFS_VERSION" | tee -a "$GITHUB_ENV"
          
          platform=${{ matrix.platform.docker_arch }}
          # replaces / with -
          echo "PLATFORM_PAIR=${platform//\//-}" | tee -a $GITHUB_ENV

          IMAGE_FULL_NAME="${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.image_name }}"
          echo "IMAGE_FULL_NAME=$IMAGE_FULL_NAME" | tee -a "$GITHUB_ENV"

      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      # Set up BuildKit Docker container builder to be able to build-push and export cache
      # Needed for annotations
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/metadata-action
      - name: "Define image metadata: ${{ inputs.image_name }}"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          tags: ""

      # https://github.com/docker/build-push-action
      - name: "Build Docker image: ${{ inputs.image_name }}"
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ./${{ inputs.image_name }}/Containerfile
          context: ./${{ inputs.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform.docker_arch }}
          tags: ${{ env.IMAGE_FULL_NAME }}
          annotations: ${{ steps.meta.outputs.annotations }}
          # https://docs.docker.com/build/exporters/image-registry/
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true,compression=zstd

      # https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
      - name: Export digests
        run: |
          mkdir -p ${{ runner.temp }}/digests/
          digest="${{ steps.build.outputs.digest }}"
          # removes sha256: prefix
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
          
      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

      # Sign the resulting Docker images digests.
      # This will only write to the public Rekor transparency log when the Docker repository is public to avoid leaking data. 
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker images
        # step disabled for now
        if: false
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS_BASE: ${{ steps.meta-base.outputs.tags }}
          TAGS_ZFS: ${{ steps.meta-zfs.outputs.tags }}
          DIGEST_BASE: ${{ steps.build-and-push-base.outputs.digest }}
          DIGEST_ZFS: ${{ steps.build-and-push-zfs.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
        run: |
          echo "${TAGS_BASE}" | xargs -I {} cosign sign --yes {}@${DIGEST_BASE}
          echo "${TAGS_ZFS}" | xargs -I {} cosign sign --yes {}@${DIGEST_ZFS}

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/metadata-action
      - name: "Define image metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_NAME }}
          # creates 3 tags.
          # `stable` and `latest` when it's run on main branch
          # `20250101` when this workflow is triggered by a schedule
          tags: |
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=${{ env.FCOS_VERSION }}${{ inputs.tag_suffix }}
          # default labels: https://github.com/opencontainers/image-spec/blob/main/annotations.md
          # labels are deprecated, use annotations

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          # jq command preps the tags as -t flags
          # printf command formats each filename as a reference to an image digest
          #   *: Expands to all files in the current directory (runner.temp/digests)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_FULL_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_FULL_NAME }}:${{ steps.meta.outputs.version }}