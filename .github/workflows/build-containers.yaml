name: "Build Containers"

on:
  schedule:
    # https://crontab.guru/#42_16_*_*_1,5
    - cron: '42 1 * * *'
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Docker registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME_BASE: ${{ github.repository }}

jobs:
  build:

    name: Build on ${{ matrix.docker_arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - docker_arch: linux/amd64
            fcos_arch: x86_64
            runner: ubuntu-latest
          - docker_arch: linux/arm64
            fcos_arch: aarch64
            runner: ubuntu-24.04-arm

    permissions:
      contents: read
      packages: write
      attestations: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Gets the version of Fedora distribution used in the Fedora CoreOS base image
      - name: Set FCOS_VERSION, BUILDER_VERSION, ZFS_VERSION
        run: |
          FCOS_JSON=$(curl -s "https://builds.coreos.fedoraproject.org/streams/stable.json")
          FCOS_VERSION=$(echo "$FCOS_JSON" | jq -r '.architectures.${{ matrix.fcos_arch }}.artifacts.metal.release')
          BUILDER_VERSION=$(echo "$FCOS_VERSION" | cut -d '.' -f 1)
          ZFS_VERSION=$(curl -s "https://api.github.com/repos/openzfs/zfs/releases" | jq -r --arg ZMV "zfs-" '[ .[] | select(.prerelease==false and .draft==false) | select(.tag_name | startswith($ZMV))][0].tag_name' | cut -f2- -d-)
          echo "FCOS_VERSION=$FCOS_VERSION" | tee -a "$GITHUB_ENV"
          echo "BUILDER_VERSION=$BUILDER_VERSION" | tee -a "$GITHUB_ENV"
          echo "ZFS_VERSION=$ZFS_VERSION" | tee -a "$GITHUB_ENV"

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1

      # Set up BuildKit Docker container builder to be able to build-push and export cache
      # Needed for annotations
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Define metadata for Docker image for base
      # https://github.com/docker/metadata-action
      - name: "Define image metadata: base"
        id: meta-base
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/base
          # creates 3 tags.
          # `stable` and `latest` when it's run on main branch
          # `20250101` when this workflow is triggered by a schedule
          tags: |
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=${{ env.FCOS_VERSION }}
          # default labels: https://github.com/opencontainers/image-spec/blob/main/annotations.md
          # labels are deprecated, use annotations
          annotations: |
            org.opencontainers.image.version=stable

      # Define metadata for Docker image for zfs
      # https://github.com/docker/metadata-action
      - name: "Define image metadata: zfs"
        id: meta-zfs
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/zfs
          tags: |
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=${{ env.FCOS_VERSION }}-${{ env.ZFS_VERSION }}
          annotations: |
            org.opencontainers.image.version=stable

      # Build and push Docker image for base
      # https://github.com/docker/build-push-action
      - name: "Build and push Docker image: base"
        id: build-and-push-base
        uses: docker/build-push-action@v6
        with:
          file: ./base/Containerfile
          context: ./base
          #platforms: "linux/amd64,linux/arm64"
          platforms: ${{ matrix.docker_arch }}
          tags: ${{ steps.meta-base.outputs.tags }}
          #labels: ${{ steps.meta-base.outputs.labels }}
          annotations: ${{ steps.meta-base.outputs.annotations }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image for zfs
      # https://github.com/docker/build-push-action
      - name: "Build and push Docker image: zfs"
        id: build-and-push-zfs
        uses: docker/build-push-action@v6
        with:
          file: ./zfs/Containerfile
          context: ./zfs
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}/base:${{ env.FCOS_VERSION }}
            BUILDER_VERSION=${{ env.BUILDER_VERSION }}
            ZFS_VERSION=${{ env.ZFS_VERSION }}
          platforms: ${{ matrix.docker_arch }}
          tags: ${{ steps.meta-zfs.outputs.tags }}
          #labels: ${{ steps.meta-zfs.outputs.labels }}
          annotations: ${{ steps.meta-base.outputs.annotations }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker images digests.
      # This will only write to the public Rekor transparency log when the Docker repository is public to avoid leaking data. 
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker images
        # step disabled for now
        if: false
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS_BASE: ${{ steps.meta-base.outputs.tags }}
          TAGS_ZFS: ${{ steps.meta-zfs.outputs.tags }}
          DIGEST_BASE: ${{ steps.build-and-push-base.outputs.digest }}
          DIGEST_ZFS: ${{ steps.build-and-push-zfs.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio instance.
        run: |
          echo "${TAGS_BASE}" | xargs -I {} cosign sign --yes {}@${DIGEST_BASE}
          echo "${TAGS_ZFS}" | xargs -I {} cosign sign --yes {}@${DIGEST_ZFS}
